@using WebForm.Common;
@using System.Data;
@using System.Diagnostics;
@using Microsoft.AspNetCore.Mvc;
@using WebForm.Helpers;
@using WebForm.Models;

@{

    Layout = "~/Views/Shared/_Layout.cshtml";


}
<style>


    table {
        border-collapse: collapse;
        width: 100%;
        text-align: center;
        table-layout: fixed;
    }

    col {
        width: 12.5%; /* 8 cột => mỗi cột chiếm 12.5% */
    }

    th, td {
        border: 1px solid #999;
        padding: 6px 8px;
        vertical-align: middle;
        /* word-wrap: break-word; */
    }

    .section-header {
        background-color: #b7f1cb;
        color: #16315e;
        font-family: Lexenddeca_B;
    }

    .column-header {
        background-color: #d58a35;
        font-family: Lexenddeca_light;
        color: #f9f9f9;
    }

    .highlight-green {
        background-color: #15a903;
        /*  font-weight: bold; */
    }

    .highlight-red {
        background-color: #eb0505;
        color: white;
        /*  font-weight: bold; */
    }

    .highlight-ye {
        background-color: #ffc107;
        color: white;
        /*  font-weight: bold; */
    }

    tr th {
        font-family: Lexenddeca_light
    }


    #app td {
        color: #221e1e !important;
        font-size: 15px;
    }

    .status_1 {
        padding: 3px 10px;
        border-radius: 16px;
        font-size: 14px;
        background: #027c00;
        color: #fff;
    }

    .status_2 {
        padding: 3px 10px;
        border-radius: 16px;
        font-size: 14px;
        background: #e57b03;
        color: #fff;
    }

    .status_3 {
        padding: 3px 10px;
        border-radius: 16px;
        font-size: 14px;
         background: #007c77;
        color: #fff;
    }


    .status_text_1 {
       
        font-size: 13px;
        /* background: #027c00; */
        color: #027c00;
    }

    .status_text_2 {
        font-size: 13px;
        /* background: #e57b03; */
        color: #e57b03;
    }

    .status_text_3 {
        font-size: 13px;
        /* background: #007c77; */
        color: #007c77;
    }



    @@media screen and (max-width: 768px) {
        .hidden-mobile {
            display: none;
        }

        .show-mobile {
            display: revert-layer;
        }
    }

    @@media screen and (min-width: 769px) {
        .hidden-mobile {
            display: revert-layer;
        }

        .show-mobile {
            display: none;
        }
    }
</style>

<div class="area-page-title">
    <div class="container">
        <h1 class="animate a_01">Danh mục khuyến nghị</h1>
        <ol class="breadcrumb animate a_02">
            <li class="breadcrumb-item">
                <a href="/">Trang chủ</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">Danh mục khuyến nghị</li>
        </ol>
    </div>
</div>

<section id="service-details" class="service-details section">
    <div id="trading">
        <div class="container" id="app">

            <div class="row gy-4">


                <div class="col-12">

                    <table>
                        <!-- Hiện trên desktop -->
                        <tr class="hidden-mobile">
                            <th colspan="9" class="section-header" style="padding:12px;">
                                DANH MỤC KHUYẾN NGHỊ NGẮN HẠN
                            </th>
                        </tr>

                        <!-- Hiện trên mobile -->
                        <tr class="show-mobile">
                            <th colspan="5" class="section-header" style="padding:12px;">
                                DANH MỤC KHUYẾN NGHỊ NGẮN HẠN
                            </th>
                        </tr>
                        <tr>
                            <th class="hidden-mobile column-header">Ngày mở vị thế</th>
                            <th class="column-header">MÃ</th>
                            <th class="column-header">Giá mua<br>(1.000đ)</th>
                            <th class="column-header">Giá hiện tại<br>(1.000đ)</th>
                            <th class="hidden-mobile column-header">Giá mục tiêu<br>(1.000đ)</th>
                            <th class="hidden-mobile column-header">Giá dừng lỗ<br>(1.000đ)</th>
                            <th class="hidden-mobile column-header"> Upside kỳ vọng (%)</th>
                            <th class="column-header">Hiệu quả đầu tư (%)</th>
                            <th class="column-header">Cập nhật vị thế / trạng thái</th>
                        </tr>
                        <tr v-for="(item, index) in paddedStocks" :key="index">
                            <td class="hidden-mobile">{{ item?.Open_Position_Date }}</td>
                            <td>

                                <a v-if="item?.Symbol" :href="`/chi-tiet-co-phieu/${item.Symbol}`" style="color: #16315e !important; font-family: LexendDeca_B;">
                                    {{ item?.Symbol }}
                                </a>
                                <span v-else>&nbsp;</span>

                            </td>



                            <td class="text-end">{{ item?.Price_Text }}</td>
                            <td class="text-end">{{ item?.Current_Price_Text }}</td>
                          
                            <td class="hidden-mobile text-end">{{ item?.PRICE_Taget_Text }}</td>
                            <td class="hidden-mobile text-end">{{ item?.T_Pause }}</td>
                            <td class="hidden-mobile text-end">{{ item?.Upside }}</td>

                            <td class="text-end" :class="{
                                'highlight-green' : item?.HieuQua>
                                0,
                                'highlight-red': item?.HieuQua < 0,
                                'highlight-ye': item?.HieuQua == 0
                                }">
                                {{ item?.HieuQua }}
                            </td>


                            <td class="hidden-mobile">
                                <span :class="{
                                  'status_1' : item?.Status == '1',
                                  'status_2' : item?.Status == '2',
                                   'status_3': item?.Status == '3'
                                }">
                                    {{ item?.Status_Text == 'Theo dõi giải ngân' ? 'Theo dõi' : item?.Status_Text }}
                                </span>

                            </td>

                            <td class="show-mobile">
                                <span :class="{
                                  'status_text_1' : item?.Status == '1',
                                  'status_text_2' : item?.Status == '2',
                                   'status_text_3': item?.Status == '3'
                                }">
                                    {{ item?.Status_Text == 'Theo dõi giải ngân' ? 'Theo dõi' : item?.Status_Text }}
                                </span>

                            </td>



                    </table>

                    <div style="margin-bottom: 70px;"></div>

                    <!-- BẢNG 2 -->
                    <table>
                       
                        <tr>
                            <th colspan="7" class="section-header" style="padding: 12px;">DANH MỤC THEO DÕI CHỜ MUA</th>
                        </tr>
                        <tr>
                            <th class="column-header">Mã</th>
                            <th class="column-header">Giá hiện tại<br>(1.000đ)</th>
                            <th class="column-header">Giá mua<br>(1.000đ)</th>
                            <th class="column-header">Giá mục tiêu<br>(1.000đ)</th>
                            <th class="column-header">Giá dừng lỗ<br>(1.000đ)</th>
                            <th class="column-header">Hiệu quả kỳ vọng đầu tư (%)</th>
                            <th class="column-header">Khuyến nghị</th> <!-- Gộp 2 cột -->
                        </tr>
                        <tr v-for="(item, index) in paddedFilteredStocks" :key="index">
                            <td>

                                <a v-if="item?.Symbol" :href="`/chi-tiet-co-phieu/${item.Symbol}`" style="color: #16315e !important; font-family: LexendDeca_B;">
                                    {{ item?.Symbol }}
                                </a>
                                <span v-else>&nbsp;</span>

                            </td>
                            <td class="text-end">{{ item?.Current_Price_Text }}</td>
                            <td class="text-end">{{ item?.Price_Text }}</td>
                            <td class="text-end">{{ item?.PRICE_Taget_Text }}</td>
                            <td class="text-end">{{ item?.T_Pause }}</td>
                            <td class="text-end">{{ item?.Upside }}</td>
                            <td>{{ item?.Note }}</td>

                        </tr>
                    </table>



                </div>


            </div>

        </div>
    </div>
</section>
<script src="/assets/js/vue.global.js"></script>

<script>
    const { createApp, ref, onMounted, computed } = Vue

    createApp({
      setup() {
        const stocks = ref([])

        // Tạo mảng luôn đủ 5 dòng
        const paddedStocks = computed(() => {
          const filtered = stocks.value.filter(item => item?.IsSpecial === 'N')
          const filled = [...filtered]
          while (filled.length < 10) {
            filled.push(null) // hoặc {} nếu muốn tránh undefined
          }
          return filled.slice(0, 10)
        })


          const paddedFilteredStocks = computed(() => {
              const filtered = stocks.value.filter(item => item?.IsSpecial === 'Y')
              const filled = [...filtered]
              while (filled.length < 10) {
                filled.push(null)
              }
              return filled.slice(0, 10)
            })


        // Xử lý class màu theo Heso_Text
        function getClass(hesoText) {
          const value = parseFloat(hesoText)
          if (isNaN(value)) return ''
          return value > 0 ? 'positive' : value < 0 ? 'negative' : 'yellow'
        }

        // Gọi API để lấy stocks
        function sendPost() {
          axios.get('/Home/GetStocks')
            .then(function (response) {
              console.log('Gửi thành công:', response.data)
              stocks.value = response.data
            })
            .catch(function (error) {
              console.error('Lỗi khi gọi API:', error)
            })
        }

        onMounted(() => {
          sendPost()
          setInterval(sendPost, 5000) // gọi lại mỗi 5 giây
        })

        return {
          stocks,
          paddedStocks,
          getClass,
          paddedFilteredStocks
        }
      }
    }).mount('#app')
</script>